TODO list of features to add
============================

Some of those points where given a try, but where removed because they were
ineffective or too slow. Before taking one of those points, you can ask devs
what is the state of the point, but contributions are welcomed :)

If you have an idea that would enhance srddl, you can also add an issue on
bitbucket and it will be considered. If it is accepted, it will be added here
and implemented.

General TODOs
-------------

 - performance: Enhance performance of the whole thing. Some leads are to check
                algorithm, to avoid useless wrapping of some things (if we can
                say so), or adding __slots__ to a lot of things via metaclasses.
 - documentation: Add some sphinx documentation about general usage of srddl and
                  also the code (with docstrings).
 - testing: Add some more-complete tests. Add some tests on things not correctly
            done right now, like if the data is not long enough, etc. This will
            foster adding more features.
 - file types: Add more decoders, only ELF is implemented, and not completly
               documented...
 - file types, structures, data: Try to uniformize setup/_setup/map*. It's
                                 quite disturbing at first.

Core structure declaration
--------------------------

 - fields: Do something about the verbosity of IntField declaration. Size and
           endianess options are long. Really long.
 - fields: Add more standard fields. Here is a list of ideas:
    * Reference field (OffsetField that describes a struct somewhere else, etc)
    * Checksum fields (CRC, ...)
 - fields: Add a way to hook a SwitchFields to provide new types to an already
           defined switch, to add temporary implementations of non-managed types
           without modifing base sources.
 - structures: Add the possibility to do pattern matching, to search something
               in some data. Say, this first must be 2, this third field must
               respect this function, ...
 - structures: Add some automatic reference dependency. When an array depends on
               another field of the struct for its size for example, it would be
               awesome to have the array updated if the size is modified.
 - structures: Add something to navigate to your parent (the structure that
               mapped you) easily.
 - structures, fields: Add 'static' properties, to separate the need of an
                       instance and the possibilty to answer even without it.
 - structures, data: Add a layout for structure placement and an infinite data
                     type to be able to craft data "on-the-fly".
 - data: Add the possibility to insert in the data, instead of the default
         overriding usage.
 - data: Add something to read infinite streamed data.
 - file data: Add some way to rename correctly the file associated with the map.

Frontends
---------

 - shell: Add a shell front-end, to toy easily with a file or some data, use
          file decoders etc.

 - curses: Continue the implementation of the curses front-end.

 - GUI: Make a try to write this in C++ . Looks worth a try.
 - GUI: Add a way to edit the file in the hex view, with selection etc.
 - GUI: Add a way to edit fields directly. It would be awesome to be able to be
        able to select options available per field to manipulate this edit form.
 - GUI: Add the possibility to try a detection at another offset (sub-data).
 - GUI: Add a go-to that permits to directly go to an offset.
 - GUI: Enhance fluidity, it's really bad right now...

Other ideas: not really sure if should be implemented.
------------------------------------------------------

 - structures: Add a loader for XML format provided for "synalyze it!"?
